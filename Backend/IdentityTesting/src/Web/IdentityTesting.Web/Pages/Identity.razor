@page "/Identity"
@using FluentValidation

<EditForm Model="Input" FormName="LoginForm" OnValidSubmit="SubmitFormAsync" OnInvalidSubmit="OnInvalidSubmit">
    <FluentValidationValidator Validator="@Validator"/>
    <ValidationSummary/>
    <InputText type="email" @bind-Value="Input.Email"/>
    <InputText type="password "@bind-Value="Input.Password"/>
    <button type="submit">Login</button>
</EditForm>

@code {
    private InputModel Input { get; set; } = new();

    [Inject]
    private IValidator<InputModel> Validator { get; set; } = null!;
    private void OnInvalidSubmit()
    {
        Console.WriteLine("Invalid");
    }

    private Task SubmitFormAsync()
    {
        Console.WriteLine("valid");
        
        return Task.CompletedTask;
    }
    
    internal sealed class InputModel
    {
        public string? Email { get; set; }
        public string? Password { get; set; }
    }

    internal sealed class InputModelValidator : AbstractValidator<InputModel>
    {
        public InputModelValidator()
        {
            RuleFor(x => x.Email).Cascade(CascadeMode.Stop)
                .NotEmpty()
                .WithMessage("Email is required")
                .EmailAddress()
                .WithMessage("Email is not valid");
        
            RuleFor(x => x.Password).Cascade(CascadeMode.Stop)
                .NotEmpty()
                .WithMessage("Password is required")
                .MinimumLength(6)
                .WithMessage("Password must be at least 6 characters");
        }
    }
}