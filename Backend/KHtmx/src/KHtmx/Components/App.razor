@inject IWebHostEnvironment WebHostEnvironment

<!DOCTYPE html>
<html
    lang="en">

<head>
    <meta charset="utf-8" />
    <meta
        name="viewport"
        content="width=device-width, initial-scale=1.0" />
    <meta
        name="description"
        content="HTMX Demo by @@KennethHoff" />
    <base href="/" />
    <link
        rel="stylesheet"
        href="app.css?v=@DateTimeOffset.UtcNow.ToString("O")" />
    <link
        rel="icon"
        type="image/png"
        href="favicon.png" />
    <script src="htmx/htmx.js"></script>
    <script src="htmx/extensions/idiomorph.js"></script>
    <script src="htmx/extensions/sse.js"></script>
    <HeadOutlet />
</head>

<body
    class="bg-background h-screen w-screen"
    hx-ext="morph">
<Routes />
</body>

@if (WebHostEnvironment.IsDevelopment())
{
    <script>
    htmx.on("htmx:afterRequest", (e) => {
        if (e.detail.xhr.status >= 400) {
            createErrorToast(e);
        }
    });
    
    @* TODO: Use something better than `aria-label` for query selectors *@
    const detailsTemplate = `
        <details toast class="absolute bottom-0 right-0 bg-red-700 text-white font-bold rounded-t px-4 py-2 cursor-pointer">
            <summary class="flex flex-row place-content-between gap-20 p-4">
                <span>Server Error 
                    <span aria-label="Status Code">{Status}</span>
                    <span aria-label="Status Text">{StatusText}</span>
                </span>
                <div class="flex flex-row gap-8 place-content-center">
                    <button aria-label="Copy Error">Copy</button>
                    <button aria-label="Close Error">Close</button>
                    <button aria-label="Make Fullscreen">Fullscreen</button>
                </div>
            </summary>
            <pre aria-label="Response Text" class="border border-t-0 border-red-400 rounded-b bg-red-800 p-4 text-red-200 cursor-auto max-w-2xl max-h-[50vh] overflow-auto">{ResponseText}</pre>
        </details>
    `;
    
    const dialogTemplate = `
        <dialog toast class="p-4 rounded-xl bg-red-700">
            <header class="flex flex-row place-content-between gap-20 p-4">
                <span>Server Error 
                    <span aria-label="Status Code">{Status}</span>
                    <span aria-label="Status Text">{StatusText}</span>
                </span>
                <div class="flex flex-row gap-8 place-content-center">
                    <button aria-label="Copy Error">Copy</button>
                    <button aria-label="Close Error">Close</button>
                    <button aria-label="Make Fullscreen">Fullscreen</button>
                </div>
            </header>
            <main>
                <pre aria-label="Response Text" class="border border-t-0 border-gray-400 rounded-b bg-red-800 p-4 text-gray-200 cursor-auto max-w-[80vw] max-h-[80vh]">{ResponseText}</pre>
            </main>
        </dialog>
    `;

    function createErrorToast(e) {
        const templateElement = document.createElement("template");
        templateElement.innerHTML = detailsTemplate
            .replace("{Status}", e.detail.xhr.status)
            .replace("{StatusText}", e.detail.xhr.statusText)
            .replace("{ResponseText}", e.detail.xhr.responseText);
        
        const detailsElement = templateElement.content.querySelector("details");
        document.body.appendChild(detailsElement);

        addClickListeners(
            detailsElement.querySelector("[aria-label='Copy Error']"),
            detailsElement.querySelector("[aria-label='Close Error']"),
            detailsElement.querySelector("[aria-label='Make Fullscreen']")        
        );
    }
                
    function addClickListeners(copyBtn, closeBtn, fullscreenBtn) {
        copyBtn.addEventListener("click", (e) => {
            const text = e.target.closest("[toast]").querySelector("pre").innerHTML;
            navigator.clipboard.writeText(text);
        });
        
        closeBtn.addEventListener("click", (e) => {
            e.target.closest("[toast]").remove();
        });
        
        fullscreenBtn.addEventListener("click", (e) => {
            const wrapperElement = e.target.closest("[toast]");
            if (wrapperElement.tagName === "DETAILS") {
                convertToDialog(wrapperElement);
            }
            else {
                convertToDetails(wrapperElement);
            }
        });
    } 
    
    function convertToDialog(existingElement) {
        // Get values from existing elements
        const values = {
            Status: existingElement.querySelector("[aria-label='Status Code']").innerHTML,
            StatusText: existingElement.querySelector("[aria-label='Status Text']").innerHTML,
            ResponseText: existingElement.querySelector("[aria-label='Response Text']").innerHTML
        };
        
        // Create new elements
        const templateElement = document.createElement("template");
        templateElement.innerHTML = dialogTemplate
            .replace("{Status}", values.Status)
            .replace("{StatusText}", values.StatusText)
            .replace("{ResponseText}", values.ResponseText);
        const newDialogElement = templateElement.content.querySelector("dialog");
        existingElement.replaceWith(newDialogElement);
        
        // Add event listeners to new elements
        const newCopyButtonElement = newDialogElement.querySelector("[aria-label='Copy Error']");
        const newCloseButtonElement = newDialogElement.querySelector("[aria-label='Close Error']");
        const newFullscreenButtonElement = newDialogElement.querySelector("[aria-label='Make Fullscreen']");

        addClickListeners(
            newCopyButtonElement,
            newCloseButtonElement,
            newFullscreenButtonElement
        );

        // Open the dialog
        newDialogElement.showModal();
    }
    
    function convertToDetails(existingElement) {
        // Get values from existing elements
        const values = {
            Status: existingElement.querySelector("[aria-label='Status Code']").innerHTML,
            StatusText: existingElement.querySelector("[aria-label='Status Text']").innerHTML,
            ResponseText: existingElement.querySelector("[aria-label='Response Text']").innerHTML
        };
        
        // Create new elements
        const templateElement = document.createElement("template");
        templateElement.innerHTML = detailsTemplate
            .replace("{Status}", values.Status)
            .replace("{StatusText}", values.StatusText)
            .replace("{ResponseText}", values.ResponseText);
        const newDetailsElement = templateElement.content.querySelector("details");
        existingElement.replaceWith(newDetailsElement);
        
        // Add event listeners to new elements
        const newCopyButtonElement = newDetailsElement.querySelector("[aria-label='Copy Error']");
        const newCloseButtonElement = newDetailsElement.querySelector("[aria-label='Close Error']");
        const newFullscreenButtonElement = newDetailsElement.querySelector("[aria-label='Make Fullscreen']");
        
        addClickListeners(
            newCopyButtonElement,
            newCloseButtonElement,
            newFullscreenButtonElement
        );
    }
    
    </script>
}
</html>
