@using Humanizer
@using KHtmx.Comments
@using KHtmx.Constants
@using KHtmx.Persistence
@using KHtmx.Domain.Comments
@using KHtmx.Domain.People
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject LinkGenerator LinkGenerator
@inject IDbContextFactory<KhDbContext> DbContextFactory
@inject IHttpContextAccessor HttpContextAccessor
@inject IServiceScopeFactory ServiceScopeFactory

<table
    class="w-full text-left"
    hx-swap="outerHTML"
    hx-trigger="sse:@ServerSentEventNames.CommentAdded, sse:@ServerSentEventNames.CommentDeleted, sse:@ServerSentEventNames.CommentUpdated"
    hx-get="@(LinkGenerator.GetPathByName(CommentEndpoints.GetCommentTable.EndpointName) + Filter?.QueryString)">
    <!-- TODO: Figure out how to somehow only listen to the SSEs that are relevant to the filter. -->
    <colgroup>
        <col />
        <col />
        <col />
    </colgroup>
    <thead>
        <tr
            class="bg-gray-600 text-white">
            <th
                scope="col">
                Author
            </th>
            <th
                scope="col">
                Text
            </th>
            <th
                scope="col">
                Timestamp
            </th>
        </tr>
    </thead>
    <tbody>
        @if (_comments is [])
        {
            <tr>
                <td
                    colspan="3">
                    No comments yet - be the first!
                </td>
            </tr>
        }
        else
        {
            foreach (var comment in _comments)
            {
                <tr
                    class="odd:bg-gray-300 even:bg-gray-100 [&:has(button:focus)]:bg-gray-400">
                    <td
                    >
                        <button
                            class="focus:outline-none"
                            id="tr_btn_@comment.Id"
                            hx-trigger="click"
                            hx-target="body"
                            hx-swap="beforeend"
                            hx-get="@LinkGenerator.GetPathByName(CommentEndpoints.GetCommentDialog.EndpointName, new { id = comment.Id })">
                            @comment.AuthorFirstName @comment.AuthorLastName
                        </button>
                    </td>
                    <td>
                        @comment.Text
                    </td>
                    <td>
                        <time
                            datetime="@comment.Timestamp.ToString("o")"
                            title="@comment.Timestamp.ToString("G")">
                            @comment.Timestamp.Humanize(DateTimeOffset.Now)
                        </time>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>


@code {

    [Parameter]
    public ICommentTableFilter? Filter { get; set; }

    private IReadOnlyList<CommentTableDto> _comments = [];

    protected override async Task OnInitializedAsync()
    {
        if (HttpContextAccessor.HttpContext?.User is not { Identity.IsAuthenticated: true } claimsPrincipal)
        {
            return;
        }

        using var serviceScope = ServiceScopeFactory.CreateScope();
        using var userManager = serviceScope.ServiceProvider.GetRequiredService<UserManager<KhtmxUser>>();
        if (await userManager.GetUserAsync(claimsPrincipal) is not {} user)
        {
            return;
        }

        await using var dbContext = await DbContextFactory.CreateDbContextAsync();

        var query = dbContext.Comments.AsQueryable();

        if (Filter is not null)
        {
            query = Filter.Apply(query);
        }

        var commentsFromDb = await query
            .OrderByDescending(x => x.Timestamp)
            .Take(10)
            .Select(c => new
            {
                Id = c.Id,
                Text = c.Text,
                Author = dbContext.Users.FirstOrDefault(u => u.Id == c.AuthorId),
                Timestamp = c.Timestamp,
            })
            .ToListAsync();

        _comments = commentsFromDb
            .Select(c => new CommentTableDto
            {
                Id = c.Id,
                Text = c.Text,
                AuthorFirstName = c.Author?.FirstName ?? "Unknown",
                AuthorLastName = c.Author?.LastName ?? "Unknown",
                Timestamp = c.Timestamp,
            })
            .ToList();
    }

}
