@using Humanizer
@using KHtmx.Components.Comments.Data
@using KHtmx.Constants
@using KHtmx.Persistence
@using KHtmx.Domain.Comments
@using KHtmx.Domain.People
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject LinkGenerator LinkGenerator
@inject IDbContextFactory<KhDbContext> DbContextFactory
@inject IHttpContextAccessor HttpContextAccessor
@inject IServiceScopeFactory ServiceScopeFactory

<!-- TODO: Figure out how to somehow only listen to the SSEs that are relevant to the filter. -->
<!-- TODO: Figure out how to use `sse-swap` instead of trigger+get w/ Blazor SSR -->

<div class="grid w-full comment-table"
     role="table"
     aria-rowcount="@_comments.Count"
     hx-swap="outerHTML transition:true"
     hx-trigger="sse:@ServerSentEventNames.CommentTableUpdated"
     hx-get="@(LinkGenerator.GetPathByName(CommentEndpoints.GetCommentTable.EndpointName, Filter?.QueryString))">

    <!-- Table header -->
    <div role="row" aria-rowindex="1" class="grid bg-gray-600 grid-cols-comment-table">
        <div aria-colindex="1" role="columnheader">
            Author
        </div>
        <div aria-colindex="2" role="columnheader">
            Text
        </div>
        <div aria-colindex="3" role="columnheader">
            Timestamp
        </div>
    </div>

    <!-- Table body -->
    @if (_comments is [])
    {
        <div aria-rowspan="0">
            No comments yet - be the first!
        </div>
    }
    else
    {
        for (var index = 0; index < _comments.Count; index++)
        {
            var comment = _comments[index];
            <div style="view-transition-name: @GetViewTransitionName(comment.Id);"
                 role="row"
                 id="tr_@(comment.Id)"
                 aria-rowindex="@index"
                 class="grid grid-cols-comment-table odd:bg-gray-800 even:bg-gray-900  [&:has(button:focus)]:bg-action-hover"
            >
                <div role="cell" aria-colindex="1">
                    <button
                        class="focus:outline-none"
                        id="tr_btn_@comment.Id"
                        hx-target="closest div"
                        hx-swap="beforeend"
                        hx-get="@LinkGenerator.GetPathByName(CommentEndpoints.GetCommentDialog.EndpointName, new { id = comment.Id })">
                        @comment.AuthorFirstName @comment.AuthorLastName
                    </button>
                </div>
                <div role="cell" aria-colindex="2">
                    @comment.Text
                </div>
                <div role="cell" aria-colindex="3">
                    <time datetime="@comment.Timestamp.ToString("o")">
                        @comment.Timestamp.ToString("G")
                    </time>
                </div>
            </div>
        }
    }

    <style>
    
    @@keyframes move-down {
        from {
            transform: translateY(-100%);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }    
    }
    
        @foreach (var comment in _comments)
        {
            var viewTransitionName = GetViewTransitionName(comment.Id);

            <text>
                ::view-transition-old(@viewTransitionName) {
                    animation-duration: 50ms;
                }
                
                ::view-transition-new(@viewTransitionName) {
                    animation-duration: 50ms;
                }
            </text>
        }
    </style>
</div>

@code {

    [Parameter]
    public ICommentTableFilter? Filter { get; set; }

    private IReadOnlyList<CommentTableDto> _comments = [];

    protected override async Task OnInitializedAsync()
    {
        if (HttpContextAccessor.HttpContext?.User is not { Identity.IsAuthenticated: true } claimsPrincipal)
        {
            return;
        }

        using var serviceScope = ServiceScopeFactory.CreateScope();
        using var userManager = serviceScope.ServiceProvider.GetRequiredService<UserManager<KhtmxUser>>();
        if (await userManager.GetUserAsync(claimsPrincipal) is not {} user)
        {
            return;
        }

        await using var dbContext = await DbContextFactory.CreateDbContextAsync();

        var query = dbContext.Comments.AsQueryable();

        if (Filter is not null)
        {
            query = Filter.Apply(query);
        }

        var commentsFromDb = await query
            .OrderByDescending(x => x.Timestamp)
            .Take(100)
            .Select(c => new
            {
                Id = c.Id,
                Text = c.Text,
                Author = dbContext.Users.FirstOrDefault(u => u.Id == c.AuthorId),
                Timestamp = c.Timestamp,
            })
            .ToListAsync();

        _comments = commentsFromDb
            .Select(c => new CommentTableDto
            {
                Id = c.Id,
                Text = c.Text,
                AuthorFirstName = c.Author?.FirstName ?? "Unknown",
                AuthorLastName = c.Author?.LastName ?? "Unknown",
                Timestamp = c.Timestamp,
            })
            .ToList();
    }

    private string GetViewTransitionName(Guid id) => $"vt_{id}";

}
