@using Humanizer
@using KHtmx.Comments
@using KHtmx.Constants
@using KHtmx.Persistence
@using KHtmx.Domain.Comments
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<KhDbContext> DbContextFactory
@inject ILogger<CommentTable> Logger

<table
    class="w-full text-left"
    hx-swap="outerHTML"
    hx-trigger="sse:@ServerSentEventNames.CommentAdded, sse:@ServerSentEventNames.CommentDeleted, sse:@ServerSentEventNames.CommentUpdated"
    hx-get="@CommentsEndpointExtensions.CommentsEndpoint">
    <colgroup>
        <col />
        <col />
        <col />
    </colgroup>
    <thead>
        <tr
            class="bg-gray-600 text-white">
            <th
                scope="col">
                Author
            </th>
            <th
                scope="col">
                Text
            </th>
            <th
                scope="col">
                Timestamp
            </th>
        </tr>
    </thead>
    <tbody>
        @if (Comments is [])
        {
            <tr>
                <td
                    colspan="3">
                    No comments yet - be the first!
                </td>
            </tr>
        }
        else
        {
            foreach (var comment in Comments)
            {
                <tr
                    class="[&:nth-child(odd)]:bg-gray-300 [&:nth-child(even)]:bg-gray-100 [&:has(button:focus)]:bg-gray-400">
                    <td>
                        <button
                            class="focus:outline-none"
                            id="tr_btn_@comment.Id"
                            hx-trigger="click"
                            hx-target="#home"
                            hx-swap="beforeend"
                            hx-get="@($"{CommentsEndpointExtensions.CommentsEndpoint}/{comment.Id}")">
                            @comment.Author.Name
                        </button>
                    </td>
                    <td>
                        @comment.Text
                    </td>
                    <td>
                        <time
                            datetime="@comment.Timestamp.ToString("o")"
                            title="@comment.Timestamp.ToString("G")">
                            @comment.Timestamp.Humanize(DateTimeOffset.Now)
                        </time>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>


@code {
    private IReadOnlyList<Comment> Comments { get; set; } = ArraySegment<Comment>.Empty;

    protected override async Task OnInitializedAsync()
    {
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        Comments = await dbContext.Comments
            .Include(comment => comment.Author)
            .OrderByDescending(comment => comment.Timestamp)
            .Take(10)
            .ToListAsync();

        await base.OnInitializedAsync();
    }

}
