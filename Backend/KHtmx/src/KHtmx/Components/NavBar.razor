@using Microsoft.Identity.Client
@using KHtmx.Account
@using KHtmx.Domain.People
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject LinkGenerator LinkGenerator
@inject IHttpContextAccessor HttpContextAccessor
@inject IServiceScopeFactory ServiceScopeFactory

<nav
    class="flex flex-row place-content-between place-items-center">
    <a
        href="/"
        hx-boost="true"
        class="text-2xl font-bold text-blue-500">
        KHtmx
    </a>
    @if (!_isAuthenticated)
    {
        <div></div>
        <div>
            <button
                class="bg-gray-800 text-white px-3 py-2 rounded-md text-sm font-medium"
                hx-trigger="click"
                hx-get="@LinkGenerator.GetPathByName(AccountEndpoints.GetRegisterDialog.EndpointName)"
                hx-target="closest nav"
                hx-swap="beforeend">
                Register
            </button>
            <button
                class="bg-gray-800 text-white px-3 py-2 rounded-md text-sm font-medium"
                hx-trigger="click"
                hx-get="@LinkGenerator.GetPathByName(AccountEndpoints.GetLoginDialog.EndpointName)"
                hx-target="closest nav"
                hx-swap="beforeend">
                Login
            </button>
        </div>
    }
    else
    {
        <p>
            Hello,
            <a
                class="text-blue-500 font-bold"
                hx-boost="true"
                href="/profile">
                @_firstName @_lastName
            </a>
        </p>

        <button
            class="bg-gray-800 text-white px-3 py-2 rounded-md text-sm font-medium"
            hx-trigger="click"
            hx-get="@LinkGenerator.GetPathByName(AccountEndpoints.Logout.EndpointName)"
            hx-target="closest nav"
            hx-swap="beforeend"
            hx-on="htmx:afterRequest:window.location.reload()">
            Logout
        </button>
    }
</nav>

@code {

    private bool _isAuthenticated;

    private string? _firstName;
    private string? _lastName;

    protected override async Task OnInitializedAsync()
    {
        if (HttpContextAccessor.HttpContext?.User is not { Identity.IsAuthenticated: true } claimsPrincipal)
        {
            return;
        }
        
        using var serviceScope = ServiceScopeFactory.CreateScope();
        using var userManager = serviceScope.ServiceProvider.GetRequiredService<UserManager<KhtmxUser>>();
        if (await userManager.GetUserAsync(claimsPrincipal) is not {} user)
        {
            return;
        }

        _isAuthenticated = true;

        _firstName = user.FirstName;
        _lastName = user.LastName;
    }

}
