<dialog id="@Id" @attributes="AdditionalAttributes">
    @ChildContent
    
    <script type="module">
        const dialog = document.querySelector("#@Id");
        dialog.showModal();
        // dialog.focus();
        // dialog.blur();
        
        // Adds a click-listener to the dialog that closes it when the user clicks outside of it, but only if the user started and ended the click outside of the dialog.
        // This prevents the dialog from closing when the user tries to select something inside the modal and accidentally drags their mouse outside before releasing.
        
        
        let mouseDownInsideDialog = false;
        dialog.addEventListener("mousedown", (e) => {
            const rect = dialog.getBoundingClientRect();
            mouseDownInsideDialog = isInsideDialog(rect,  e);
        });
        
        dialog.addEventListener("mouseup", (e) => {
            const rect = dialog.getBoundingClientRect();
            if (!mouseDownInsideDialog && !isInsideDialog(rect, e)) {
                mouseDownInsideDialog = false;
                dialog.close();
            }
        });
        
        dialog.addEventListener("close", () => {
            dialog.remove();
        });
        
        function isInsideDialog(rect, e) {
            return e.clientX >= rect.left && e.clientX <= rect.right && e.clientY >= rect.top && e.clientY <= rect.bottom;
        }
    </script>
</dialog>

@code {

    [Parameter, EditorRequired]
    public string? Id { get; init; }
    
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; init; }

    [Parameter]
    public RenderFragment? ChildContent { get; init; }
}